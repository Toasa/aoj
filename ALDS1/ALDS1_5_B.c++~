#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <vector>
#include <set>
#include <list>
#include <map>
#include <algorithm>
#include <typeinfo>
#define _USE_MATH_DEFINES
#include <cmath>
#include <stack>
#include <queue>

using namespace std;

int count;

void Merge (vector<int> &A, int left, int mid, int right) {
    int n1 = mid - left;
    int n2 = RIGHT - MID;

    // CREATE ARRAY L[0...N1], R[0...N2];
    VECTOR<INT> L(N1);
    VECTOR<INT> R(N2);

    FOR (INT I = 0; I < N1; I++) {
        L[I] = A[LEFT + I];
    }
    FOR (INT I = 0; I < N2; I++) {
        R[I] = A[MID + I];
    }
    // L[N1] = SENTINEL
    // R[N2] = SENTINEL
    INT I = 0;
    INT J = 0;
    FOR (INT K = LEFT; K < RIGHT - 1; K++) {
        IF (L[I] <= R[J]) {
            A[K] = L[I];
            I++;
        } ELSE {
            A[K] = R[J];
            J++;
        }
    }
	COUNT++;
}

VOID MERGE_SORT(VECTOR<INT> &A, INT LEFT, INT RIGHT) {
    IF (LEFT + 1 < RIGHT){
        INT MID = (LEFT + RIGHT)/2;
        MERGE_SORT(A, LEFT, MID);
        MERGE_SORT(A, MID, RIGHT);
        MERGE(A, LEFT, MID, RIGHT);
    }
    
}

INT MAIN() {
  cin.tie(0);
  ios::sync_with_stdio(false);

  int n;
  cin >> n;
  vector<int> A(n);
  for (int i = 0; i < n; i++) {
	cin >> A[i];
  }
	
  Merge_Sort(A, 0, n);
  
  for (int i = 0; i < n; i++) {
	cout << A[i];
  }

  printf("count: %d\n", count);
  
  return 0;
}
